-- This file needs to have same structure as nvconfig.lua 
-- https://github.com/NvChad/ui/blob/v3.0/lua/nvconfig.lua
-- Please read that file to know all available options :( 

---@type ChadrcConfig
local M = {}

M.base46 = {
	theme = "comfydark",
	theme_toggle = { "comfydark", "vscode_dark" },
	
	hl_add = {},
	hl_override = {
		-- Core Vim groups
		Normal = { fg = "#c9d1d9" },
		Comment = { fg = "#6A9955", italic = true },
		Constant = { fg = "#569CD6" }, -- includes booleans in many syntaxes
		String = { fg = "#CE9178" },
		Character = { fg = "#CE9178" },
		Number = { fg = "#B5CEA8" },
		Boolean = { fg = "#569CD6" },
		Float = { fg = "#B5CEA8" },
		Identifier = { fg = "#9CDCFE" },
		Function = { fg = "#DCDCAA" },
		Statement = { fg = "#569CD6" },
		Conditional = { fg = "#C586C0" },
		Repeat = { fg = "#C586C0" },
		Label = { fg = "#C586C0" },
		Operator = { fg = "#D4D4D4" },
		Keyword = { fg = "#569CD6" },
		Exception = { fg = "#C586C0" },
		PreProc = { fg = "#569CD6" },
		Include = { fg = "#C586C0" },
		Define = { fg = "#569CD6" },
		Macro = { fg = "#569CD6" },
		PreCondit = { fg = "#569CD6" },
		Type = { fg = "#4EC9B0" },
		StorageClass = { fg = "#569CD6" },
		Structure = { fg = "#4EC9B0" },
		Typedef = { fg = "#4EC9B0" },
		Special = { fg = "#D4D4D4" },
		SpecialComment = { fg = "#6A9955", italic = true },
		Debug = { fg = "#569CD6" },
		Delimiter = { fg = "#D4D4D4" },
		Error = { fg = "#f85149" },
		Todo = { fg = "#C586C0", bold = true },

		-- Treesitter captures (new style)
		["@comment"] = { link = "Comment" },
		["@variable"] = { fg = "#9CDCFE" },
		["@variable.parameter"] = { fg = "#9CDCFE" },
		["@variable.member"] = { fg = "#9CDCFE" },
		["@variable.builtin"] = { fg = "#569CD6" },
		["@constant"] = { fg = "#569CD6" },
		["@constant.builtin"] = { fg = "#569CD6" },
		["@constant.macro"] = { fg = "#569CD6" },
		["@string"] = { link = "String" },
		["@string.escape"] = { fg = "#D7BA7D" },
		["@string.regex"] = { fg = "#D16969" },
		["@character"] = { link = "Character" },
		["@number"] = { link = "Number" },
		["@boolean"] = { link = "Boolean" },
		["@float"] = { link = "Float" },
		["@function"] = { link = "Function" },
		["@function.call"] = { link = "Function" },
		["@function.builtin"] = { link = "Function" },
		["@function.method"] = { link = "Function" },
		["@method"] = { link = "Function" },
		["@keyword"] = { link = "Keyword" },
		["@keyword.function"] = { fg = "#569CD6" },
		["@keyword.return"] = { fg = "#C586C0" },
		["@keyword.operator"] = { fg = "#569CD6" },
		["@keyword.import"] = { fg = "#C586C0" },
		["@keyword.export"] = { fg = "#C586C0" },
		["@keyword.control"] = { fg = "#C586C0" },
		["@type"] = { link = "Type" },
		["@type.builtin"] = { fg = "#569CD6" },
		["@type.definition"] = { fg = "#4EC9B0" },
		["@tag"] = { fg = "#569CD6" },
		["@tag.attribute"] = { fg = "#9CDCFE" },
		["@tag.delimiter"] = { fg = "#808080" },
		["@property"] = { fg = "#9CDCFE" },
		["@field"] = { fg = "#9CDCFE" },
		["@parameter"] = { fg = "#9CDCFE" },
		["@operator"] = { fg = "#D4D4D4" },
		["@punctuation"] = { fg = "#D4D4D4" },
		["@punctuation.bracket"] = { fg = "#D4D4D4" },
		["@punctuation.delimiter"] = { fg = "#D4D4D4" },
		["@lsp.type.namespace"] = { fg = "#4EC9B0" },
		["@lsp.type.class"] = { fg = "#4EC9B0" },
		["@lsp.type.interface"] = { fg = "#4EC9B0" },
		["@lsp.type.enum"] = { fg = "#4EC9B0" },
		["@lsp.type.typeParameter"] = { fg = "#4EC9B0" },
		["@lsp.type.property"] = { fg = "#9CDCFE" },
		["@lsp.type.variable"] = { fg = "#9CDCFE" },
		["@lsp.type.parameter"] = { fg = "#9CDCFE" },
		["@lsp.type.enumMember"] = { fg = "#4FC1FF" },
		["@lsp.type.function"] = { fg = "#DCDCAA" },
		["@lsp.type.method"] = { fg = "#DCDCAA" },
		["@lsp.type.decorator"] = { fg = "#DCDCAA" },
		["@lsp.type.operator"] = { fg = "#D4D4D4" },
		["@lsp.type.macro"] = { fg = "#569CD6" },
	},
	integrations = {},
	changed_themes = {},
	transparency = false,
}

return M
