# Default recipe - show list of available commands
_default:
    just list

# Dynamic project command routing - allows 'just <project> <command>' instead of 'just run pers/<project> <command>'
[no-exit-message]
project *args='':
    #!/usr/bin/env bash
    RED=$'\033[0;31m'
    GREEN=$'\033[0;32m'
    BLUE=$'\033[0;34m'
    GRAY=$'\033[0;90m'
    NC=$'\033[0m'

    args_array=({{args}})

    if [ ${#args_array[@]} -eq 0 ]; then
        printf "${RED}‚ùå Usage:${NC} just project <project_name> [command] [args]\n"
        printf "${GRAY}Available projects under ~/proj/pers/:${NC}\n"
        find ~/proj/pers -maxdepth 1 -type d -not -path "*/.*" | sed 's|.*/||' | sort | sed 's/^/  /'
        exit 1
    fi

    project_name="${args_array[0]}"

    # Check if the project directory exists
    target_dir="$HOME/proj/pers/$project_name"

    if [ ! -d "$target_dir" ]; then
        printf "${RED}‚ùå Project not found:${NC} %s\n" "$project_name"
        printf "${GRAY}Available projects under ~/proj/pers/:${NC}\n"
        find ~/proj/pers -maxdepth 1 -type d -not -path "*/.*" | sed 's|.*/||' | sort | sed 's/^/  /'
        exit 1
    fi

    if [ ! -f "$target_dir/justfile" ]; then
        printf "${RED}‚ùå No justfile found in:${NC} %s\n" "$target_dir"
        exit 1
    fi

    if [ ${#args_array[@]} -eq 1 ]; then
        printf "${BLUE}üìã Available commands in${NC} ${GREEN}%s${NC}:\n" "$project_name"
        cd "$target_dir" && just --list --unsorted
        exit 0
    fi

    command="${args_array[1]}"
    remaining_args="${args_array[@]:2}"

    printf "${BLUE}üèÉ Running:${NC} ${GREEN}just %s %s${NC} ${GRAY}in %s${NC}\n" "$command" "$remaining_args" "$target_dir"
    cd "$target_dir" && just "$command" ${remaining_args}

list:
    #!/usr/bin/env bash
    set -euo pipefail
    BOLD=$'\033[1m'
    BLUE=$'\033[0;34m'
    GREEN=$'\033[0;32m'
    YELLOW=$'\033[0;33m'
    CYAN=$'\033[0;36m'
    GRAY=$'\033[0;90m'
    NC=$'\033[0m'

    find ~/proj/pers -maxdepth 4 -name "justfile" -type f \
        -not -path "*/.*" \
        -not -path "*/node_modules/*" \
        -not -path "*/target/*" \
        -not -path "*/.build/*" \
        -not -path "*/build/*" \
        2>/dev/null | sort | while read -r justfile_path; do

    rel_path="${justfile_path#$HOME/}"
    project_dir="${justfile_path%/justfile}"
    project_name="${project_dir##*/}"

    printf "${BOLD}${GREEN}üìÅ %s${NC} ${GRAY}(%s)${NC}:\n" "$project_name" "$rel_path"

    (cd "$project_dir" && just --list --unsorted 2>/dev/null) | \
        awk '/^    [a-zA-Z]/ { gsub(/^    /, ""); printf "  \033[0;36m%s\033[0m\n", $0 }' || \
        printf "  ${GRAY}(error reading commands)${NC}\n"
    echo ""
    done

    printf "${BOLD}${YELLOW}Usage:${NC}\n"
    printf "  ${CYAN}just project${NC} <project> [command] [args]  ${GRAY}# Direct project access${NC}\n"
    printf "  ${CYAN}just run${NC} <project_path> <command> [args]  ${GRAY}# Full path access${NC}\n\n"
    printf "${BOLD}${YELLOW}Examples:${NC}\n"
    printf "  ${GRAY}just project${NC} ${GREEN}dotfiles${NC} ${CYAN}stow${NC}  ${GRAY}# Shorthand${NC}\n"
    printf "  ${GRAY}just project${NC} ${GREEN}toolbox${NC} ${CYAN}sleep-enable${NC}  ${GRAY}# Shorthand${NC}\n"
    printf "  ${GRAY}just run${NC} ${GREEN}pers/toolbox/github${NC} ${CYAN}batch-close-issues${NC} ${YELLOW}'search-term'${NC}  ${GRAY}# Full path${NC}\n"

run path command *args:
    #!/usr/bin/env bash
    RED=$'\033[0;31m'
    GREEN=$'\033[0;32m'
    BLUE=$'\033[0;34m'
    GRAY=$'\033[0;90m'
    NC=$'\033[0m'

    target_dir="$HOME/proj/{{path}}"

    if [ ! -d "$target_dir" ]; then
    printf "${RED}‚ùå Directory not found:${NC} %s\n" "$target_dir"
    exit 1
    fi

    if [ ! -f "$target_dir/justfile" ]; then
    printf "${RED}‚ùå No justfile found in:${NC} %s\n" "$target_dir"
    exit 1
    fi

    printf "${BLUE}üèÉ Running:${NC} ${GREEN}just {{command}} {{args}}${NC} ${GRAY}in %s${NC}\n" "$target_dir"
    cd "$target_dir" && just {{command}} {{args}}

find-command command:
    #!/usr/bin/env bash
    BLUE=$'\033[0;34m'
    GREEN=$'\033[0;32m'
    RED=$'\033[0;31m'
    GRAY=$'\033[0;90m'
    NC=$'\033[0m'

    printf "${BLUE}üîç Searching for command${NC} '${GREEN}{{command}}${NC}' ${BLUE}in all justfiles:${NC}\n\n"

    found=false
    find ~/proj/pers -maxdepth 4 -name "justfile" -type f \
    -not -path "*/.*" \
    -not -path "*/node_modules/*" \
    -not -path "*/target/*" \
    -not -path "*/.build/*" \
    -not -path "*/build/*" \
    2>/dev/null | while read -r justfile_path; do

    rel_path="${justfile_path#$HOME/}"
    project_dir="${justfile_path%/justfile}"
    project_name="${project_dir##*/}"

    if (cd "$project_dir" && just --list --unsorted 2>/dev/null | grep -q "^    {{command}}"); then
        printf "${GREEN}‚úÖ Found in:${NC} %s ${GRAY}(%s)${NC}\n" "$project_name" "$rel_path"
        found=true
    fi
    done

    if [ "$found" = false ]; then
    printf "${RED}‚ùå Command${NC} '${GREEN}{{command}}${NC}' ${RED}not found in any justfile${NC}\n"
    fi
