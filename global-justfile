# Default recipe - show list of available commands
_default:
    just list

pull:
    #!/usr/bin/env bash
    set -euo pipefail

    (cd ~/proj/pers/dotfiles && echo "[dotfiles] Starting..." && git pull 2>&1 | sed 's/^/[dotfiles] /') &
    (cd ~/proj/pers/notes && echo "[notes] Starting..." && git pull 2>&1 | sed 's/^/[notes] /') &
    (cd ~/proj/pers/toolbox && echo "[toolbox] Starting..." && git pull 2>&1 | sed 's/^/[toolbox] /') &

    wait

dotfiles command='' *args:
    #!/usr/bin/env bash
    set -euo pipefail
    target_dir="$HOME/proj/pers/dotfiles"
    if [ -z "{{command}}" ]; then
        echo "Commands for dotfiles:"
        (cd "$target_dir" && just --list --unsorted)
        exit 0
    fi
    cd "$target_dir" && just {{command}} {{args}}

toolbox command='' *args:
    #!/usr/bin/env bash
    set -euo pipefail
    target_dir="$HOME/proj/pers/toolbox"
    if [ -z "{{command}}" ]; then
        echo "Commands for toolbox:"
        (cd "$target_dir" && just --list --unsorted)
        exit 0
    fi
    # Capture the current directory before cd
    export INVOCATION_DIR="$PWD"
    cd "$target_dir" && just {{command}} {{args}}

github command='' *args:
    #!/usr/bin/env bash
    set -euo pipefail
    target_dir="$HOME/proj/pers/toolbox/github"
    if [ -z "{{command}}" ]; then
        echo "Commands for github (toolbox/github):"
        (cd "$target_dir" && just --list --unsorted)
        exit 0
    fi
    cd "$target_dir" && just {{command}} {{args}}

dev-dash-macos command='' *args:
    #!/usr/bin/env bash
    set -euo pipefail
    target_dir="$HOME/proj/pers/dev-dash-macos"
    if [ -z "{{command}}" ]; then
        echo "Commands for dev-dash-macos:"
        (cd "$target_dir" && just --list --unsorted)
        exit 0
    fi
    cd "$target_dir" && just {{command}} {{args}}

discord-bots command='' *args:
    #!/usr/bin/env bash
    set -euo pipefail
    target_dir="$HOME/proj/pers/discord-bots"
    if [ -z "{{command}}" ]; then
        echo "Commands for discord-bots:"
        (cd "$target_dir" && just --list --unsorted)
        exit 0
    fi
    cd "$target_dir" && just {{command}} {{args}}

git-auto-sync command='' *args:
    #!/usr/bin/env bash
    set -euo pipefail
    target_dir="$HOME/proj/pers/git-auto-sync"
    if [ -z "{{command}}" ]; then
        echo "Commands for git-auto-sync:"
        (cd "$target_dir" && just --list --unsorted)
        exit 0
    fi
    cd "$target_dir" && just {{command}} {{args}}

list:
    #!/usr/bin/env bash
    # Removed '-u' to avoid unbound variable errors when printing '$1' literally in helper snippet
    set -eo pipefail
    BOLD=$'\033[1m'
    BLUE=$'\033[0;34m'
    GREEN=$'\033[0;32m'
    YELLOW=$'\033[0;33m'
    CYAN=$'\033[0;36m'
    GRAY=$'\033[0;90m'
    NC=$'\033[0m'

    find ~/proj/pers -maxdepth 4 -name "justfile" -type f \
        -not -path "*/.*" \
        -not -path "*/node_modules/*" \
        -not -path "*/target/*" \
        -not -path "*/.build/*" \
        -not -path "*/build/*" \
        2>/dev/null | sort | while read -r justfile_path; do

    rel_path="${justfile_path#$HOME/}"
    project_dir="${justfile_path%/justfile}"
    project_name="${project_dir##*/}"

    printf "${BOLD}${GREEN}üìÅ %s${NC} ${GRAY}(%s)${NC}:\n" "$project_name" "$rel_path"

    (cd "$project_dir" && just --list --unsorted 2>/dev/null) | \
        awk '/^    [a-zA-Z]/ { gsub(/^    /, ""); printf "  \033[0;36m%s\033[0m\n", $0 }' || \
        printf "  ${GRAY}(error reading commands)${NC}\n"
    echo ""
    done

run path command *args:
    #!/usr/bin/env bash
    RED=$'\033[0;31m'
    GREEN=$'\033[0;32m'
    BLUE=$'\033[0;34m'
    GRAY=$'\033[0;90m'
    NC=$'\033[0m'

    target_dir="$HOME/proj/{{path}}"

    if [ ! -d "$target_dir" ]; then
    printf "${RED}‚ùå Directory not found:${NC} %s\n" "$target_dir"
    exit 1
    fi

    if [ ! -f "$target_dir/justfile" ]; then
    printf "${RED}‚ùå No justfile found in:${NC} %s\n" "$target_dir"
    exit 1
    fi

    printf "${BLUE}üèÉ Running:${NC} ${GREEN}just {{command}} {{args}}${NC} ${GRAY}in %s${NC}\n" "$target_dir"
    cd "$target_dir" && just {{command}} {{args}}

find-command command:
    #!/usr/bin/env bash
    BLUE=$'\033[0;34m'
    GREEN=$'\033[0;32m'
    RED=$'\033[0;31m'
    GRAY=$'\033[0;90m'
    NC=$'\033[0m'

    printf "${BLUE}üîç Searching for command${NC} '${GREEN}{{command}}${NC}' ${BLUE}in all justfiles:${NC}\n\n"

    found=false
    find ~/proj/pers -maxdepth 4 -name "justfile" -type f \
    -not -path "*/.*" \
    -not -path "*/node_modules/*" \
    -not -path "*/target/*" \
    -not -path "*/.build/*" \
    -not -path "*/build/*" \
    2>/dev/null | while read -r justfile_path; do

    rel_path="${justfile_path#$HOME/}"
    project_dir="${justfile_path%/justfile}"
    project_name="${project_dir##*/}"

    if (cd "$project_dir" && just --list --unsorted 2>/dev/null | grep -q "^    {{command}}"); then
        printf "${GREEN}‚úÖ Found in:${NC} %s ${GRAY}(%s)${NC}\n" "$project_name" "$rel_path"
        found=true
    fi
    done

    if [ "$found" = false ]; then
    printf "${RED}‚ùå Command${NC} '${GREEN}{{command}}${NC}' ${RED}not found in any justfile${NC}\n"
    fi
